#  Copyright (C) 2016 Open Lab Athens.
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  @license GPL-3.0+ <http://spdx.org/licenses/GPL-3.0+>
#
#
#  Changes
#
#  15-8-2016: Rowan Thorpe <rowan@rowanthorpe.com>: Original commit

user                                 www-data www-data;
worker_processes                     auto;
error_log                            /var/log/nginx/error.log error;
pid                                  /run/nginx/nginx.pid;
pcre_jit                             on;
# Each connection needs a filehandle (or 2 if you are proxying)
worker_rlimit_nofile                 11000;

events {
	worker_connections           5000;
	multi_accept                 on;
	use                          epoll;
}

http {
	include                      mime.types;
	default_type                 application/octet-stream;
	#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
	#                  '$status $body_bytes_sent "$http_referer" '
	#                  '"$http_user_agent" "$http_x_forwarded_for"';
	access_log                   /var/log/nginx/access.log;
	sendfile                     on;
	tcp_nopush                   on;
	keepalive_timeout            30;

	aio                          threads;
	aio_write                    on;
	autoindex                    off;
	charset                      utf-8;
	client_max_body_size         20m;
	directio                     8m;
	error_log                    /var/log/nginx/error.log error;
	##TODO: what about gzip_static?
	##NB: TLS1, including even TLSv1.2 is vulnerable to subtle prediction attacks when any compression is used
	gzip                         off;
	#gzip_disable                "msie6";
	#gzip_vary                   on;
	#gzip_proxied                any;
	#gzip_comp_level             6;
	#gzip_buffers                16 8k;
	#gzip_http_version           1.1;
	#gzip_types
	#	application/atom+xml
	#	application/javascript
	#	application/json
	#	application/rss+xml
	#	application/vnd.ms-fontobject
	#	application/x-font-ttf
	#	application/x-web-app-manifest+json
	#	application/xhtml+xml
	#	application/xml
	#	font/opentype
	#	image/svg+xml
	#	image/x-icon
	#	text/css
	#	text/plain
	#	text/x-component
	#	text/xml
	#	text/javascript;
	index                        index.html;
	limit_req_status             503;
	limit_req_zone               $binary_remote_addr zone=perip_normal:2m      rate=5r/s;
	limit_req_zone               $server_name        zone=perserver_normal:1m  rate=1000r/s;
	limit_req_zone               $binary_remote_addr zone=perip_slow:2m        rate=1r/s;
	limit_req_zone               $server_name        zone=perserver_slow:1m    rate=10r/s;
	lua_code_cache               on;
	lua_package_cpath            ';;';
	lua_package_path             '/usr/local/etc/nginx/lua/?.lua;/usr/local/share/kong/?/init.lua;/usr/local/share/kong/?.lua;;';
	lua_max_pending_timers       16384;
	lua_max_running_timers       4096;
	lua_shared_dict              cache 128m;
	lua_shared_dict              cache_locks 100k;
	lua_shared_dict              cluster_autojoin_locks 100k;
	lua_shared_dict              cluster_locks 100k;
	#lua_shared_dict              jwt 5M;
	lua_shared_dict              reports_locks 100k;
	lua_socket_log_errors        off;
	map_hash_bucket_size         64;
	map_hash_max_size            4096;
	proxy_ssl_server_name        on;
	real_ip_header               X-Forwarded-For;
	real_ip_recursive            on;
	reset_timedout_connection    on;
	resolver                     127.0.0.1:53 ipv6=off;
	resolver_timeout             5s;
	root                         /var/www/html;
	#NB: server_names_hash_bucket_size should be set to what is in /sys/devices/system/cpu/cpu0/cache/index?/coherency_line_size
	server_name_in_redirect      on;
	server_names_hash_bucket_size 64;
	server_names_hash_max_size   2048;
	server_tokens                off;
	set_real_ip_from             0.0.0.0/0;
	ssl_certificate              /etc/letsencrypt/live/[domain]/fullchain.pem;
	ssl_certificate_key          /etc/letsencrypt/live/[domain]/privkey.pem;
	ssl_ciphers                  'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
	ssl_dhparam                  ssl/dhparam.pem;
	ssl_prefer_server_ciphers    on;
	ssl_protocols                TLSv1.2 TLSv1.1 TLSv1; # No SSLv3 (POODLE), keep compression off [default] in TLSv1 (CRIME)
	ssl_session_cache            shared:SSL:50m;
	ssl_session_tickets          off;
	ssl_session_timeout          1d;
	ssl_stapling                 on;
	ssl_stapling_verify          on;
	ssl_trusted_certificate      /etc/letsencrypt/live/[domain]/fullchain.pem;
	tcp_nodelay                  on;
	types_hash_bucket_size       64;
	types_hash_max_size          2048;
	underscores_in_headers       on;
	variables_hash_bucket_size   64;
	variables_hash_max_size      2048;

	##NB: 'always' needed for applying header to all status-codes when using add_header, but this happens by default
	##    ...with more_set_headers (no need for 'always')
	# http://en.wikipedia.org/wiki/Clickjacking, https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
	more_set_headers             'X-Frame-Options: SAMEORIGIN';
	# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	more_set_headers             'X-Content-Type-Options: nosniff' 'X-XSS-Protection: 1; mode=block';
	# http://www.html5rocks.com/en/tutorials/security/content-security-policy, https://www.owasp.org/index.php/Content_Security_Policy, http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
	#NB: don't include csp-file here (can't set vars outside "server" context
	more_set_headers             "Content-Security-Policy: default-src 'self'; script-src 'self'; img-src 'self'; style-src 'self'; font-src 'self'; child-src 'none'; object-src 'none';";
	# Prevent (mobile) carriers rewriting content on the fly. NB: ngx_pagespeed won't work with this set
	more_set_headers             'Cache-Control: no-transform';
	# Force latest IE version
	more_set_headers             'X-UA-Compatible: IE=Edge';
	##TODO: HSTS (31556952 seconds = 1 year)
	#more_set_headers             'Strict-Transport-Security: max-age=31556952; includeSubdomains;'
	##TODO: HPKP (2629746 seconds = 1 month)
	#more_set_headers             'Public-Key-Pins[-Report-Only]: pin-sha256="[base64-of-sha256binary-of-pub-key-in-der-form]"; pin-sha256="[base64-of-sha256binary-of-backup-pub-key-1-in-der-form]"; pin-sha256="[base64-of-sha256binary-of-backup-pub-key-2-in-der-form]"; max-age=2629746; includeSubDomains; report-uri="[report-URI-on-different-domain]"

	upstream timebank            { postgres_server 127.0.0.1:5432 dbname=timebank user=timebank password=-------------; }
	upstream api                 { postgres_server 127.0.0.1:5432 dbname=api user=api password=-------; }
	#upstream freeswitch         { postgres_server 127.0.0.1 dbname=freeswitch user=freeswitch password=-------------; }

	include                      conf.d/*.conf;

	init_by_lua_block {
		require 'resty.core'
		--js_unsafe = require('cjson')
		js = require('cjson.safe')
		--bcrypt = require('bcrypt')
		--bcrypt_rounds = 12 -- tuned for this server's CPU to take <= 1s, see https://github.com/mikejsavage/lua-bcrypt#user-content-tuning
		--http = require('resty.http') -- TODO: include the .new() here for http once cosockets work in init_by_lua context
		pg = require("pgmoon").new() -- TODO: include connection details in .new() when using pg:connect() in locations
		--jwt = require('resty.jwt')
		--NB: nginx_master_ident is to prepend to JWT-signing-key, because we store invalid JWTs in-mem, and on nginx restart we would
		--    lose those and risk invalid tokens becoming valid again
		--local ok, err = ngx.shared.jwt:safe_set("nginx_master_id", tostring(os.time()))
		--if not ok then
		--	ngx.say("failure to set shared nginx_master_id: " .. err)
		--	ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
		--end
		--kong_admin_host = '127.0.0.1'
		--kong_admin_port = 8101
		jwtauth = require('jwtauth')
		kong = require('kong')
		kong.init()
	}

	init_worker_by_lua_block {
		kong.init_worker()
	}

	include                      sites-enabled/*;
}

#include                             nginx-mail.conf;
#include                             nginx-stream.conf;
